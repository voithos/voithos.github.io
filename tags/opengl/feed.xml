<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opengl on voithos.io</title>
    <link>https://voithos.io/tags/opengl/</link>
    <description>Recent content in Opengl on voithos.io</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Aug 2024 14:46:38 -0800</lastBuildDate>
    <atom:link href="https://voithos.io/tags/opengl/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenGL Texture Mip Targeting</title>
      <link>https://voithos.io/articles/opengl-texture-mip-targeting/</link>
      <pubDate>Mon, 05 Aug 2024 14:46:38 -0800</pubDate>
      <guid>https://voithos.io/articles/opengl-texture-mip-targeting/</guid>
      <description>&lt;p&gt;A while back, I was implementing a&#xA;&lt;a href=&#34;https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom&#34;&gt;bloom post process effect&lt;/a&gt;&#xA;for my personal renderer project, and I ran into an interesting hurdle involving&#xA;how texture samplers and framebuffers work in OpenGL.&lt;/p&gt;&#xA;&lt;p&gt;A pretty common technique used by several engines involves repeated downsamples&#xA;of the final (HDR) frame using a specialized blur kernel, and then a series of&#xA;upsamples in reverse that accumulate the blurred textures, resulting in a nice&#xA;and natural-looking bloom effect after tone mapping.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
