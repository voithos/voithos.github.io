<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unreal-engine on voithos.io</title>
    <link>https://voithos.io/tags/unreal-engine/</link>
    <description>Recent content in unreal-engine on voithos.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 May 2023 16:58:57 -0700</lastBuildDate><atom:link href="https://voithos.io/tags/unreal-engine/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating UObjects From Async Threads</title>
      <link>https://voithos.io/articles/creating-uobjects-from-async-threads/</link>
      <pubDate>Sat, 06 May 2023 16:58:57 -0700</pubDate>
      
      <guid>https://voithos.io/articles/creating-uobjects-from-async-threads/</guid>
      <description>When developing a project in Unreal, for performance reasons you may find yourself needing to do work on background threads. This could be an FRunnableThread, an AsyncTask(), or even UE5&amp;rsquo;s fancy new Tasks System &amp;ndash; any code that isn&amp;rsquo;t executing on the game thread.
As a motivating example, perhaps you need to dynamically load and process some mesh / texture data at runtime. Most of the processing work is thread-agnostic, but what if you need to create UObjects to represent the data?</description>
    </item>
    
    <item>
      <title>Reference Shenanigans</title>
      <link>https://voithos.io/articles/reference-shenanigans/</link>
      <pubDate>Thu, 09 Mar 2023 21:40:37 -0800</pubDate>
      
      <guid>https://voithos.io/articles/reference-shenanigans/</guid>
      <description>A while back, I was working on some Unreal C++ code involving a tree traversal and a hash map used for intermediate information when I encountered a subtle bug (which of course feels obvious in hindsight). At the time, I had lost the better part of the day to the issue, but it actually led me to some interesting conclusions so I thought it&amp;rsquo;d be fun to try to present it here in a somewhat generalized and simplified way.</description>
    </item>
    
  </channel>
</rss>
